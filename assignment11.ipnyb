{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"assignment11.ipnyb","provenance":[{"file_id":"1mHSTxoPNB45FSNvNcj5BmcJWia_HKXma","timestamp":1591321944527},{"file_id":"1bHNhafqHlIA3AaK0c6fAvfKFQBlNBnod","timestamp":1591081918804},{"file_id":"1Mr5v5OPayPbxpgFqqP9RAOAlAT6AeP9t","timestamp":1590465551420},{"file_id":"1ZOY7WhtpuImqOCq6xH9xb3SKjZpWsjDg","timestamp":1590042024344},{"file_id":"1lHsUCT-169HWJX_gH3AHVWMCPf8_fgp6","timestamp":1589267672437},{"file_id":"1kxLGScNJFdPu0TJjKnYjdBghuA8RpayJ","timestamp":1588227282478},{"file_id":"14sk42Vw2kXkbmmU_DRavxSB79umcYmY-","timestamp":1587433034302}],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1QigOnxUepqi0Br-udvPuVkdftLeWwAYP","authorship_tag":"ABX9TyM1VqYdtqAYoJUXfV3451vE"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Eh-H3h7uYq8L","colab_type":"text"},"source":["Multi-label classification using neural networks with a regularization.\n","---"]},{"cell_type":"markdown","metadata":{"id":"TJv1FZVQW5RH","colab_type":"text"},"source":["*1*. Load text data"]},{"cell_type":"code","metadata":{"id":"z_YmrfjLLpQL","colab_type":"code","outputId":"2d57297e-813d-4d11-e33b-f2dadb776c41","executionInfo":{"status":"ok","timestamp":1592200837331,"user_tz":-540,"elapsed":317754,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}},"colab":{"base_uri":"https://localhost:8080/","height":391}},"source":["import numpy as np\n","import re\n","import nltk\n","from sklearn.datasets import load_files\n","nltk.download('stopwords')\n","nltk.download('wordnet')\n","import pickle\n","from nltk.corpus import stopwords\n","from nltk.stem import WordNetLemmatizer\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.feature_extraction.text import TfidfTransformer\n","from sklearn.model_selection import train_test_split\n","\n","review_data = load_files(r\"drive/My Drive/Colab Notebooks/movie_review\")\n","X, y = review_data.data, review_data.target\n","\n","documents = []\n","\n","stemmer = WordNetLemmatizer()\n","\n","for sen in range(0, len(X)):\n","    # Remove all the special characters\n","    document = re.sub(r'\\W', ' ', str(X[sen]))\n","    \n","    # remove all single characters\n","    document = re.sub(r'\\s+[a-zA-Z]\\s+', ' ', document)\n","    \n","    # Remove single characters from the start\n","    document = re.sub(r'\\^[a-zA-Z]\\s+', ' ', document) \n","    \n","    # Substituting multiple spaces with single space\n","    document = re.sub(r'\\s+', ' ', document, flags=re.I)\n","    \n","    # Removing prefixed 'b'\n","    document = re.sub(r'^b\\s+', '', document)\n","    \n","    # Converting to Lowercase\n","    document = document.lower()\n","    \n","    # Lemmatization\n","    document = document.split()\n","    document = [stemmer.lemmatize(word) for word in document]\n","    document = ' '.join(document)\n","    \n","    documents.append(document)\n","\n","vectorizer = CountVectorizer(max_features=1500, min_df=5, max_df=0.7, stop_words=stopwords.words('english'))\n","X = vectorizer.fit_transform(documents).toarray()\n","\n","tfidfconverter = TfidfTransformer()\n","X = tfidfconverter.fit_transform(X).toarray()\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, shuffle=False)\n","print(X_train)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n","A\n"],"name":"stdout"},{"output_type":"stream","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"],"name":"stderr"},{"output_type":"stream","text":["[[0.         0.         0.         ... 0.         0.03211483 0.        ]\n"," [0.         0.         0.         ... 0.         0.08401884 0.        ]\n"," [0.         0.         0.         ... 0.06909913 0.         0.        ]\n"," ...\n"," [0.         0.         0.         ... 0.         0.03917949 0.        ]\n"," [0.         0.         0.         ... 0.         0.         0.        ]\n"," [0.         0.05031797 0.         ... 0.         0.03543396 0.        ]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3RFDhWvEkM87","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"outputId":"11f19fae-61c6-41fd-e71e-a05aee5c8b6b","executionInfo":{"status":"ok","timestamp":1592203413249,"user_tz":-540,"elapsed":981,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}}},"source":["print(X_train.shape[0])  #(1401, 1500)\n","print(y_train.shape)  #(1401,)\n","print(X_test.shape)   #(601, 1500)\n","print(y_test.shape)   #(601,)\n"],"execution_count":92,"outputs":[{"output_type":"stream","text":["1401\n","(1401,)\n","(601, 1500)\n","(601,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"13aKTkiOnmCq","colab_type":"text"},"source":["---\n","2. networks"]},{"cell_type":"code","metadata":{"id":"mqGVb6SQnoku","colab_type":"code","colab":{}},"source":["def sigmoid_(z):\n","  return 1 / (1 + np.exp(-1 * z))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9f1ZHsHFn4PE","colab_type":"code","colab":{}},"source":["def network_forward(input_x, thetas, biases):\n","  \"\"\"\n","  input_x : a data of 1500, 1 \n","  thetas : list of theta\n","  biases : list of bias\n","  \"\"\"\n","\n","  a = []\n","  num_layer = len(thetas)\n","  a.append(input_x)\n","  a_b = input_x                                     # a before \n","  for theta, bias in zip(thetas, biases):\n","    # print(\"theta's shape : \", theta.shape)      # 512, 784 etc...\n","    # print(\"bias' shape : \", bias.shape)         # 512, 1   etc...\n","    a_b = sigmoid_(np.matmul(theta, a_b) + bias)  # 512, 1 etc...\n","    # print(\"a_before's shape : \", a_b.shape)\n","    a.append(a_b)\n","\n","  # print(\"num of output is \", len(a))\n","  return a"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kXRoC8FloPy3","colab_type":"code","colab":{}},"source":["def network_backward(a, x, y, thetas, biases, learning_rate=1e-3, lambda_=5e-4):\n","  \n","  # get the delta\n","  deltas = []\n","  delta_before = a[-1] - y                           # 1, 1\n","  deltas.append(delta_before) \n","  # ------------------------- make reverse delta --------------------------\n","  thetas_r = thetas[::-1] # 6. 5. 4. 3. 2. 1\n","  thetas_r = thetas_r[:-1]# 6, 5, 4, 3, 2\n","\n","  # a                     # 1, 2, 3, 4, 5, 6, 7\n","  a_r = a[::-1]           # 7, 6, 5, 4, 3, 2, 1  \n","  a_r = a_r[1:-1]         # 6, 5, 4, 3, 2\n","\n","  for reverse_theta, reverse_a in zip(thetas_r, a_r):\n","    delta_before = np.matmul(reverse_theta.transpose(), delta_before) * reverse_a * (1-reverse_a)\n","    deltas.append(delta_before)\n","\n","  deltas_r = deltas[::-1]  # 2, 3, 4, 5, 6, 7\n","  new_gds = []\n","\n","  for delta_r, a_ in zip(deltas_r, a):\n","    new_gds.append(delta_r @ a_.transpose())\n","\n","  new_thetas = []\n","  new_biases = []\n","\n","  for new_gd, th, delta_r, bias in zip(new_gds, thetas, deltas_r, biases):\n","    new_thetas.append(th - learning_rate * new_gd + th * lambda_)\n","    new_biases.append(bias - learning_rate * delta_r)\n","\n","  return new_thetas, new_biases"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R-FXwy5bsDE-","colab_type":"code","colab":{}},"source":["def criterion(out, y, thetas, biases, lambda_=5e-4):\n","  # out - shape : [1, 1]\n","  # y - shape : [1, 1] \n","  # print(\"out's shape : \", out.shape)\n","  # print(\"y's shape : \", y.shape)\n","\n","  out = out.squeeze(1)  # [1]\n","  y = y.squeeze(1)      # [1]\n","  \n","  l2_term = 0 \n","  for theta, bias in zip(thetas, biases):\n","    l2_term += np.mean(np.square(theta))\n","    l2_term += np.mean(np.square(bias))\n","\n","  if l2_term == 0:\n","    loss = np.mean(-1 * (y * np.log(out) + (1-y) * np.log(1-out)))\n","    return loss\n","\n","  l2_term *= lambda_\n","  l2_term /= 2\n","\n","  loss = np.mean(-1 * (y * np.log(out) + (1-y) * np.log(1-out))) + l2_term\n","  return loss"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GTZIfXFuzVYM","colab_type":"code","colab":{}},"source":["class train_classifier(object):\n","\n","  def __init__(self, X_train, y_train):\n","\n","    # -------------------- set hyper parameters --------------------\n","    self.learning_rate = 5e-5\n","    self.lambda_ = 1e-4\n","    self.epochs = 10\n","\n","    # -------------------- init parameters --------------------\n","    th1 = np.random.normal(loc=0.0, scale=1, size=(512, 1500))\n","    th2 = np.random.normal(loc=0.0, scale=1, size=(256, 512))\n","    th3 = np.random.normal(loc=0.0, scale=1, size=(128, 256))\n","    th4 = np.random.normal(loc=0.0, scale=1, size=(64, 128))\n","    th5 = np.random.normal(loc=0.0, scale=1, size=(32, 64))\n","    th6 = np.random.normal(loc=0.0, scale=1, size=(16, 32))\n","    th7 = np.random.normal(loc=0.0, scale=1, size=(8, 16))\n","    th8 = np.random.normal(loc=0.0, scale=1, size=(1, 8))\n","\n","    self.thetas = [th1, th2, th3, th4, th5, th6, th7, th8]\n","\n","    bias1 = np.random.normal(loc=0.0, scale=0.1, size=(512, 1))\n","    bias2 = np.random.normal(loc=0.0, scale=0.1, size=(256, 1))\n","    bias3 = np.random.normal(loc=0.0, scale=0.1, size=(128, 1))\n","    bias4 = np.random.normal(loc=0.0, scale=0.1, size=(64, 1))\n","    bias5 = np.random.normal(loc=0.0, scale=0.1, size=(32, 1))\n","    bias6 = np.random.normal(loc=0.0, scale=0.1, size=(16, 1))\n","    bias7 = np.random.normal(loc=0.0, scale=0.1, size=(8, 1))\n","    bias8 = np.random.normal(loc=0.0, scale=0.1, size=(1, 1))\n","\n","    self.biases = [bias1, bias2, bias3, bias4, bias5, bias6, bias7, bias8] \n","\n","    self.predict_result = []\n","    self.loss_list_for_train = []\n","    self.train(X_train, y_train)\n","\n","  def train(self, X_train, y_train):\n","\n","    for epoch in range(self.epochs):\n","  \n","      print('epoch :', epoch)\n","      if epoch == 5:\n","        self.learning_rate *= 0.1\n","      sum_loss = 0\n","\n","      for idx, (x, y) in enumerate(zip(X_train, y_train)):\n","      \n","        num_data = X_train.shape[0]\n","        if idx == num_data - 1:\n","          mean_loss = sum_loss / (num_data - 1)\n","          print(mean_loss)\n","          self.loss_list_for_train.append(mean_loss)\n","\n","        y = np.expand_dims(y, axis=0)  # () --> (1,)\n","        # print(x.shape)  (1500, )\n","        # print(y.shape)  (1, )\n","\n","      \n","        x = np.expand_dims(x, axis=1) # 1500 --> 1500, 1\n","        y = np.expand_dims(y, axis=1) # 1 --> 1, 1\n","        a_output = network_forward(x, self.thetas, self.biases)\n","        out = a_output[-1]\n","      \n","        # match_cnt += is_same(out, label)\n","        loss = criterion(out, y, self.thetas, self.biases, self.lambda_)\n","\n","        # print(loss)\n","        sum_loss += loss \n","        self.thetas, self.biases = network_backward(a_output, x, y, self.thetas, self.biases, \n","                                                    self.learning_rate, self.lambda_)\n","  \n","  def determine_output(self, out):\n","    # print(out.shape)\n","    out = out.squeeze()  # (1, 1)  --> ()\n","    # print(out.shape)\n","    if out >= 0.5:\n","      out = 1\n","    else:\n","      out = 0\n","\n","    # print(out)\n","    return out\n","\n","\n","  def predict(self, X):\n","\n","    predict_result = []\n","    for x_data in X:\n","      x = np.expand_dims(x_data, axis=1) # 1500 --> 1500, 1\n","      a_output = network_forward(x, self.thetas, self.biases)\n","      out = a_output[-1]\n","      predict_result.append(self.determine_output(out))\n","\n","    return predict_result\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"q5_ETF3ymu5M","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":619},"outputId":"185f8614-01bb-4d3a-e282-f4d0cdd0a892","executionInfo":{"status":"ok","timestamp":1592207859064,"user_tz":-540,"elapsed":239275,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}}},"source":["classifier = train_classifier(X_train, y_train)\n"],"execution_count":159,"outputs":[{"output_type":"stream","text":["epoch : 0\n","0.8927417927566463\n","epoch : 1\n","0.9337572648728732\n","epoch : 2\n","0.9801762521470242\n","epoch : 3\n","1.0333459815352775\n","epoch : 4\n","1.0983047212916062\n","epoch : 5\n","1.1948012423345509\n","epoch : 6\n","1.339997121151144\n","epoch : 7\n","1.5195575715389344\n","epoch : 8\n","1.7189687224324715\n","epoch : 9\n","1.978371062309748\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ur2pK6i33t2H","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"3bb13fcd-bcc1-476f-bff4-9b26392c3620","executionInfo":{"status":"ok","timestamp":1592207919690,"user_tz":-540,"elapsed":945,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}}},"source":["print(X_test.shape)"],"execution_count":160,"outputs":[{"output_type":"stream","text":["(601, 1500)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sUrpS3WP3qKJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"outputId":"3a926b86-2b58-42a4-e021-81baa569b37c","executionInfo":{"status":"ok","timestamp":1592207922049,"user_tz":-540,"elapsed":1288,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}}},"source":["y_pred_test = classifier.predict(X_test)\n","print(y_pred_test)"],"execution_count":161,"outputs":[{"output_type":"stream","text":["[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"c9D03ncb9A-D","colab_type":"code","colab":{}},"source":["y_pred_test = classifier.predict(X_test)\n","y_pred_train = classifier.predict(X_train)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QWVghboa9x2t","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":479},"outputId":"d63121c4-0329-442b-f2e5-2dc9dafe6616","executionInfo":{"status":"ok","timestamp":1592207938432,"user_tz":-540,"elapsed":1033,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}}},"source":["from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","\n","print(confusion_matrix(y_train,y_pred_train))\n","print(classification_report(y_train,y_pred_train))\n","print(accuracy_score(y_train, y_pred_train))\n","\n","print(confusion_matrix(y_test,y_pred_test))\n","print(classification_report(y_test,y_pred_test))\n","print(accuracy_score(y_test, y_pred_test))"],"execution_count":164,"outputs":[{"output_type":"stream","text":["[[699   0]\n"," [702   0]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      1.00      0.67       699\n","           1       0.00      0.00      0.00       702\n","\n","    accuracy                           0.50      1401\n","   macro avg       0.25      0.50      0.33      1401\n","weighted avg       0.25      0.50      0.33      1401\n","\n","0.4989293361884368\n","[[302   0]\n"," [299   0]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      1.00      0.67       302\n","           1       0.00      0.00      0.00       299\n","\n","    accuracy                           0.50       601\n","   macro avg       0.25      0.50      0.33       601\n","weighted avg       0.25      0.50      0.34       601\n","\n","0.502495840266223\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"buCPUclK_fsg","colab_type":"code","colab":{}},"source":["loss_list_for_train = classifier.loss_list_for_train\n","\n","import matplotlib.pyplot as plt\n","ax = plt.figure().gca()\n","# ax.set_xticks(np.arange(epoch + 1))\n","plt.plot(loss_list_for_train, c='b')\n","plt.legend(['training loss'])\n","\n","plt.xlabel('epochs')\n","plt.ylabel('loss')\n","plt.show()"],"execution_count":0,"outputs":[]}]}