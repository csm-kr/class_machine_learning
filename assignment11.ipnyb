{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"assignment11.ipnyb","provenance":[{"file_id":"1mHSTxoPNB45FSNvNcj5BmcJWia_HKXma","timestamp":1591321944527},{"file_id":"1bHNhafqHlIA3AaK0c6fAvfKFQBlNBnod","timestamp":1591081918804},{"file_id":"1Mr5v5OPayPbxpgFqqP9RAOAlAT6AeP9t","timestamp":1590465551420},{"file_id":"1ZOY7WhtpuImqOCq6xH9xb3SKjZpWsjDg","timestamp":1590042024344},{"file_id":"1lHsUCT-169HWJX_gH3AHVWMCPf8_fgp6","timestamp":1589267672437},{"file_id":"1kxLGScNJFdPu0TJjKnYjdBghuA8RpayJ","timestamp":1588227282478},{"file_id":"14sk42Vw2kXkbmmU_DRavxSB79umcYmY-","timestamp":1587433034302}],"collapsed_sections":[],"mount_file_id":"1QigOnxUepqi0Br-udvPuVkdftLeWwAYP","authorship_tag":"ABX9TyPEFvZnAXTxQsq2FPHBEmhr"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Eh-H3h7uYq8L","colab_type":"text"},"source":["Text classification using neural networks\n","---"]},{"cell_type":"markdown","metadata":{"id":"TJv1FZVQW5RH","colab_type":"text"},"source":["*1*. Load text data"]},{"cell_type":"code","metadata":{"id":"z_YmrfjLLpQL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1592453261218,"user_tz":-540,"elapsed":8936,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}},"outputId":"92399a38-3977-44f7-9e54-61a6c2dc9f13"},"source":["import numpy as np\n","import re\n","import nltk\n","from sklearn.datasets import load_files\n","nltk.download('stopwords')\n","nltk.download('wordnet')\n","import pickle\n","from nltk.corpus import stopwords\n","from nltk.stem import WordNetLemmatizer\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.feature_extraction.text import TfidfTransformer\n","from sklearn.model_selection import train_test_split\n","\n","review_data = load_files(r\"drive/My Drive/Colab Notebooks/movie_review\")\n","X, y = review_data.data, review_data.target\n","\n","documents = []\n","\n","stemmer = WordNetLemmatizer()\n","\n","for sen in range(0, len(X)):\n","    # Remove all the special characters\n","    document = re.sub(r'\\W', ' ', str(X[sen]))\n","    \n","    # remove all single characters\n","    document = re.sub(r'\\s+[a-zA-Z]\\s+', ' ', document)\n","    \n","    # Remove single characters from the start\n","    document = re.sub(r'\\^[a-zA-Z]\\s+', ' ', document) \n","    \n","    # Substituting multiple spaces with single space\n","    document = re.sub(r'\\s+', ' ', document, flags=re.I)\n","    \n","    # Removing prefixed 'b'\n","    document = re.sub(r'^b\\s+', '', document)\n","    \n","    # Converting to Lowercase\n","    document = document.lower()\n","    \n","    # Lemmatization\n","    document = document.split()\n","    document = [stemmer.lemmatize(word) for word in document]\n","    document = ' '.join(document)\n","    \n","    documents.append(document)\n","\n","vectorizer = CountVectorizer(max_features=1500, min_df=5, max_df=0.7, stop_words=stopwords.words('english'))\n","X = vectorizer.fit_transform(documents).toarray()\n","\n","tfidfconverter = TfidfTransformer()\n","X = tfidfconverter.fit_transform(X).toarray()\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, shuffle=False)"],"execution_count":261,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VDKLqNCTR5YK","colab_type":"text"},"source":["- using countVectorizer, we can convert the review to 1500 vectors.\n","- $x \\in R^{1500}, y\\in R^{1}$\n","- x is 1500 dim vector and y is 0 or 1 (neg or pos)"]},{"cell_type":"code","metadata":{"id":"3RFDhWvEkM87","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"executionInfo":{"status":"ok","timestamp":1592453261219,"user_tz":-540,"elapsed":8916,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}},"outputId":"ffd35124-2a08-4c53-f664-33e9cf12457f"},"source":["print(X_train.shape[0])  #(1401, 1500)\n","print(y_train.shape)  #(1401,)\n","print(X_test.shape)   #(601, 1500)"],"execution_count":262,"outputs":[{"output_type":"stream","text":["1401\n","(1401,)\n","(601, 1500)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cmyZ2LH2SleH","colab_type":"text"},"source":["- number of training data is 1401 and tesing data is 601\n","- each data account for 70% and 30% of whole data."]},{"cell_type":"markdown","metadata":{"id":"13aKTkiOnmCq","colab_type":"text"},"source":["---\n","2. networks"]},{"cell_type":"code","metadata":{"id":"mqGVb6SQnoku","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592453261220,"user_tz":-540,"elapsed":8905,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}}},"source":["def sigmoid_(z):\n","  return 1 / (1 + np.exp(-1 * z))"],"execution_count":263,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8tL1AdqnTK2r","colab_type":"text"},"source":["- activation function is sigmoid.\n","- $\\sigma(z) = \\frac{1}{1 + \\exp(-z)}$"]},{"cell_type":"code","metadata":{"id":"9f1ZHsHFn4PE","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592453261221,"user_tz":-540,"elapsed":8900,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}}},"source":["def network_forward(input_x, thetas, biases):\n","  \"\"\"\n","  input_x : a data of 1500, 1 \n","  thetas : list of theta\n","  biases : list of bias\n","  \"\"\"\n","\n","  a = []\n","  num_layer = len(thetas)\n","  a.append(input_x)\n","  a_b = input_x                                     # a before \n","  for theta, bias in zip(thetas, biases):\n","    # print(\"theta's shape : \", theta.shape)      # 512, 784 etc...\n","    # print(\"bias' shape : \", bias.shape)         # 512, 1   etc...\n","    a_b = sigmoid_(np.matmul(theta, a_b) + bias)  # 512, 1 etc...\n","    # print(\"a_before's shape : \", a_b.shape)\n","    a.append(a_b)\n","\n","  # print(\"num of output is \", len(a))\n","  return a"],"execution_count":264,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NTa2h6C-TUyT","colab_type":"text"},"source":["- network forwarding code\n","- it returns all output of each layer and activation functions."]},{"cell_type":"code","metadata":{"id":"kXRoC8FloPy3","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592453261221,"user_tz":-540,"elapsed":8894,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}}},"source":["def network_backward(a, x, y, thetas, biases, learning_rate=1e-3, lambda_=5e-4):\n","  \n","  # get the delta\n","  deltas = []\n","  delta_before = a[-1] - y                           # 1, 1\n","  deltas.append(delta_before) \n","  # ------------------------- make reverse delta --------------------------\n","  thetas_r = thetas[::-1] # 6. 5. 4. 3. 2. 1\n","  thetas_r = thetas_r[:-1]# 6, 5, 4, 3, 2\n","\n","  # a                     # 1, 2, 3, 4, 5, 6, 7\n","  a_r = a[::-1]           # 7, 6, 5, 4, 3, 2, 1  \n","  a_r = a_r[1:-1]         # 6, 5, 4, 3, 2\n","\n","  for reverse_theta, reverse_a in zip(thetas_r, a_r):\n","    delta_before = np.matmul(reverse_theta.transpose(), delta_before) * reverse_a * (1-reverse_a)\n","    deltas.append(delta_before)\n","\n","  deltas_r = deltas[::-1]  # 2, 3, 4, 5, 6, 7\n","  new_gds = []\n","\n","  for delta_r, a_ in zip(deltas_r, a):\n","    new_gds.append(delta_r @ a_.transpose())\n","\n","  new_thetas = []\n","  new_biases = []\n","\n","  for new_gd, th, delta_r, bias in zip(new_gds, thetas, deltas_r, biases):\n","    new_thetas.append(th - learning_rate * new_gd + th * lambda_)\n","    new_biases.append(bias - learning_rate * delta_r)\n","\n","  return new_thetas, new_biases"],"execution_count":265,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SfYHnIV8TXv4","colab_type":"text"},"source":["- network backwarding code\n","- make back propagation for nn by myself.\n","- if l is final layer, $\\delta^{l} = a^{l} - y$, else l is not final layer, $\\delta^{l} = (\\theta^{l-1})^{T}\\delta^{l-1} * a^{l-1} * (1 - a^{l-1})$\n","- $new gradient^{(l + 1)} = gradient^{(l)} + \\delta_{j}^{(l+1)} * (a_{j}^{(l)})^{T}$"]},{"cell_type":"code","metadata":{"id":"R-FXwy5bsDE-","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592453261222,"user_tz":-540,"elapsed":8887,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}}},"source":["def criterion(out, y, thetas, biases, lambda_=5e-4):\n","  # out - shape : [1, 1]\n","  # y - shape : [1, 1] \n","  # print(\"out's shape : \", out.shape)\n","  # print(\"y's shape : \", y.shape)\n","\n","  out = out.squeeze(1)  # [1]\n","  y = y.squeeze(1)      # [1]\n","  \n","  l2_term = 0 \n","  for theta, bias in zip(thetas, biases):\n","    l2_term += np.mean(np.square(theta))\n","    l2_term += np.mean(np.square(bias))\n","\n","  if l2_term == 0:\n","    loss = np.mean(-1 * (y * np.log(out) + (1-y) * np.log(1-out)))\n","    return loss\n","\n","  l2_term *= lambda_\n","  l2_term /= 2\n","\n","  loss = np.mean(-1 * (y * np.log(out) + (1-y) * np.log(1-out))) + l2_term\n","  return loss"],"execution_count":266,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qwQo0TvlTwvH","colab_type":"text"},"source":["- make binary cross entropy loss \n","- add l2 normalization terms.\n","- $J(\\theta) = \\frac{1}{m} \\sum_{i=1}^m ( - l^{(i)} \\log( h^{(i)} ) - (1 - l^{(i)}) \\log(1 - h^{(i)}) ) + \\frac{\\lambda}{2 n} \\sum_{j=1}^n \\theta_j^2$ \n","\n"]},{"cell_type":"code","metadata":{"id":"GTZIfXFuzVYM","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592453261223,"user_tz":-540,"elapsed":8879,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}}},"source":["class train_classifier(object):\n","\n","  def __init__(self, X_train, y_train, X_test, y_test):\n","\n","    # -------------------- set hyper parameters --------------------\n","    self.learning_rate = 1e-2\n","    self.lambda_ = 1e-6\n","    self.epochs = 30\n","    self.X_test = X_test\n","    self.y_test = y_test\n","\n","    # -------------------- init parameters --------------------\n","    th1 = np.random.normal(loc=0.0, scale=1, size=(256, 1500))\n","    th3 = np.random.normal(loc=0.0, scale=1, size=(256, 256))\n","    th4 = np.random.normal(loc=0.0, scale=1, size=(128, 256))\n","    th5 = np.random.normal(loc=0.0, scale=1, size=(64, 128))    \n","    th6 = np.random.normal(loc=0.0, scale=1, size=(1, 64))\n","\n","    self.thetas = [th1, th3, th4, th5, th6]\n","\n","    bias1 = np.random.normal(loc=0.0, scale=0.1, size=(256, 1))\n","    bias3 = np.random.normal(loc=0.0, scale=0.1, size=(256, 1))\n","    bias4 = np.random.normal(loc=0.0, scale=0.1, size=(128, 1))\n","    bias5 = np.random.normal(loc=0.0, scale=0.1, size=(64, 1))\n","    bias6 = np.random.normal(loc=0.0, scale=0.1, size=(1, 1))\n","\n","    self.biases = [bias1, bias3, bias4, bias5, bias6] \n","\n","    self.loss_list_for_train = []\n","    self.loss_list_for_test = []\n","    self.accuracy_list_for_train = []\n","    self.accuracy_list_for_test = []\n","    self.train(X_train, y_train)\n","\n","  def train(self, X_train, y_train):\n","\n","    for epoch in range(self.epochs):\n","  \n","      print('epoch :', epoch)\n","\n","      losses = []\n","      y_list = []\n","      out_list = []\n","\n","      for idx, (x, y) in enumerate(zip(X_train, y_train)):\n","      \n","        num_data = X_train.shape[0]\n","\n","        y = np.expand_dims(y, axis=0)  # () --> (1,)\n","        # print(x.shape)  (1500, )\n","        # print(y.shape)  (1, )\n","\n","        x = np.expand_dims(x, axis=1) # 1500 --> 1500, 1\n","        y = np.expand_dims(y, axis=1) # 1 --> 1, 1\n","        a_output = network_forward(x, self.thetas, self.biases)\n","        out = a_output[-1]\n","\n","        y_list.append(y.squeeze())\n","        out_list.append(self.determine_output(out))\n","\n","        loss = criterion(out, y, self.thetas, self.biases, self.lambda_)\n","        losses.append(loss)\n","\n","        self.thetas, self.biases = network_backward(a_output, x, y, self.thetas, self.biases, \n","                                                    self.learning_rate, self.lambda_)\n","      \n","\n","      mean_loss = np.mean(losses)\n","      print(\"loss : \", mean_loss)\n","      self.loss_list_for_train.append(mean_loss)\n","      \n","      true_positive = np.equal(y_list, out_list)  \n","      acc = np.mean(true_positive)\n","      # print(\"acc : \", acc)\n","      self.accuracy_list_for_train.append(acc)\n","\n","      self.validate(self.X_test, self.y_test)\n","\n","\n","  def validate(self, X_test, Y_test):\n","\n","    losses = []\n","    y_list = []\n","    out_list = []\n","\n","    for idx, (x, y) in enumerate(zip(X_test, Y_test)):\n","\n","      y = np.expand_dims(y, axis=0)  # () --> (1,)\n","        \n","      x = np.expand_dims(x, axis=1) # 1500 --> 1500, 1\n","      y = np.expand_dims(y, axis=1) # 1 --> 1, 1\n","      a_output = network_forward(x, self.thetas, self.biases)\n","      out = a_output[-1]\n","\n","      y_list.append(y.squeeze())\n","      out_list.append(self.determine_output(out))\n","\n","      loss = criterion(out, y, self.thetas, self.biases, self.lambda_)\n","      losses.append(loss)\n","\n","    mean_loss = np.mean(losses) \n","    self.loss_list_for_test.append(mean_loss)\n","      \n","    true_positive = np.equal(y_list, out_list)\n","    acc = np.mean(true_positive)\n","    print(\"test acc : \", acc)\n","    self.accuracy_list_for_test.append(acc)\n","\n","  def determine_output(self, out):\n","\n","    out = out.squeeze()  # (1, 1)  --> ()\n","    if out >= 0.5:\n","      out = 1\n","    else:\n","      out = 0\n","\n","    # print(out)\n","    return out\n","\n","\n","  def predict(self, X):\n","\n","    predict_result = []\n","    for x_data in X:\n","      x = np.expand_dims(x_data, axis=1) # 1500 --> 1500, 1\n","      a_output = network_forward(x, self.thetas, self.biases)\n","      out = a_output[-1]\n","      predict_result.append(self.determine_output(out))\n","\n","    return predict_result\n"],"execution_count":267,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WW-QPpVKUC_K","colab_type":"text"},"source":["- make train_classifier class that conduct train and make optimized theta and bias\n","- it has train, validate, determine_output, predict fucntions.\n","- determine_output is determine $l^* = \\begin{cases} 0 & : h < 0.5 \\\\ 1 & : h \\ge 0.5 \\end{cases}$ h is output of networks.\n","- network consists of 5 fully connected layer like bellows.\n","- network convert features like that (1500 --> 256 --> 256 --> 128 --> 64 --> 1)\n","- lambda is 1e-6!"]},{"cell_type":"code","metadata":{"id":"q5_ETF3ymu5M","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1592453608338,"user_tz":-540,"elapsed":355984,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}},"outputId":"3aade6f0-a396-4d1b-fbce-3c635d294fb1"},"source":["classifier = train_classifier(X_train, y_train, X_test, y_test)\n","y_pred_test = classifier.predict(X_test)\n","y_pred_train = classifier.predict(X_train)"],"execution_count":268,"outputs":[{"output_type":"stream","text":["epoch : 0\n","loss :  0.7915054326863195\n","test acc :  0.5224625623960066\n","epoch : 1\n","loss :  0.6965312208247091\n","test acc :  0.5341098169717138\n","epoch : 2\n","loss :  0.6687886976331352\n","test acc :  0.5424292845257903\n","epoch : 3\n","loss :  0.6426295039313665\n","test acc :  0.5474209650582362\n","epoch : 4\n","loss :  0.6169469224180729\n","test acc :  0.5607321131447587\n","epoch : 5\n","loss :  0.592145639776809\n","test acc :  0.5757071547420965\n","epoch : 6\n","loss :  0.5669980605240597\n","test acc :  0.5840266222961731\n","epoch : 7\n","loss :  0.5410132387656112\n","test acc :  0.5906821963394343\n","epoch : 8\n","loss :  0.5143129504645457\n","test acc :  0.5956738768718802\n","epoch : 9\n","loss :  0.48708346748846126\n","test acc :  0.5940099833610649\n","epoch : 10\n","loss :  0.4595385961670509\n","test acc :  0.5940099833610649\n","epoch : 11\n","loss :  0.4318730806361065\n","test acc :  0.6073211314475874\n","epoch : 12\n","loss :  0.40436063990765375\n","test acc :  0.6073211314475874\n","epoch : 13\n","loss :  0.3771135255235001\n","test acc :  0.6139767054908486\n","epoch : 14\n","loss :  0.3502033520891812\n","test acc :  0.6156405990016639\n","epoch : 15\n","loss :  0.3238078242925492\n","test acc :  0.6156405990016639\n","epoch : 16\n","loss :  0.29801575760419646\n","test acc :  0.6139767054908486\n","epoch : 17\n","loss :  0.27294395969405993\n","test acc :  0.6239600665557404\n","epoch : 18\n","loss :  0.24871198098080594\n","test acc :  0.6289517470881864\n","epoch : 19\n","loss :  0.22537562899986333\n","test acc :  0.6222961730449251\n","epoch : 20\n","loss :  0.2032092924000353\n","test acc :  0.6306156405990017\n","epoch : 21\n","loss :  0.1825512770644584\n","test acc :  0.6405990016638935\n","epoch : 22\n","loss :  0.16344155805383467\n","test acc :  0.6422628951747088\n","epoch : 23\n","loss :  0.14604460167107325\n","test acc :  0.6505823627287853\n","epoch : 24\n","loss :  0.13044597571854052\n","test acc :  0.653910149750416\n","epoch : 25\n","loss :  0.11641585554431304\n","test acc :  0.6555740432612313\n","epoch : 26\n","loss :  0.10379160217885915\n","test acc :  0.6555740432612313\n","epoch : 27\n","loss :  0.09247175758908334\n","test acc :  0.6589018302828619\n","epoch : 28\n","loss :  0.08230647423614988\n","test acc :  0.6622296173044925\n","epoch : 29\n","loss :  0.07312485164011752\n","test acc :  0.6522462562396006\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"buCPUclK_fsg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1592453608339,"user_tz":-540,"elapsed":355973,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}},"outputId":"0309b6f6-c218-4f72-fc53-8e8b06c1b0d2"},"source":["loss_list_for_train = classifier.loss_list_for_train\n","loss_list_for_test = classifier.loss_list_for_test\n","\n","import matplotlib.pyplot as plt\n","ax = plt.figure().gca()\n","# ax.set_xticks(np.arange(epoch + 1))\n","plt.plot(loss_list_for_train, c='b')\n","plt.plot(loss_list_for_test, c='r')\n","plt.legend(['training loss', 'testing loss'])\n","\n","plt.xlabel('epochs')\n","plt.ylabel('loss')\n","plt.show()"],"execution_count":269,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Ll6bBqNjS7Bi","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1592453608664,"user_tz":-540,"elapsed":356272,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}},"outputId":"17c8ff93-2f7b-4121-db92-8666b6003e73"},"source":["acc_list_for_train = classifier.accuracy_list_for_train\n","acc_list_for_test = classifier.accuracy_list_for_test\n","\n","ax = plt.figure().gca()\n","plt.plot(acc_list_for_train, c='b')\n","plt.plot(acc_list_for_test, c='r')\n","plt.legend(['training acc', 'testing acc'])\n","\n","plt.xlabel('epochs')\n","plt.ylabel('accuracy')\n","plt.show()"],"execution_count":270,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"QWVghboa9x2t","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":425},"executionInfo":{"status":"ok","timestamp":1592453608666,"user_tz":-540,"elapsed":356262,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}},"outputId":"8a27bd6d-b201-4d37-8347-0640e038e322"},"source":["from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","\n","print(confusion_matrix(y_train,y_pred_train))\n","print(classification_report(y_train,y_pred_train))\n","print(accuracy_score(y_train, y_pred_train))\n","\n","print(confusion_matrix(y_test,y_pred_test))\n","print(classification_report(y_test,y_pred_test))\n","print(accuracy_score(y_test, y_pred_test))"],"execution_count":271,"outputs":[{"output_type":"stream","text":["[[676  23]\n"," [  8 694]]\n","              precision    recall  f1-score   support\n","\n","           0       0.99      0.97      0.98       699\n","           1       0.97      0.99      0.98       702\n","\n","    accuracy                           0.98      1401\n","   macro avg       0.98      0.98      0.98      1401\n","weighted avg       0.98      0.98      0.98      1401\n","\n","0.9778729478943612\n","[[185 117]\n"," [ 92 207]]\n","              precision    recall  f1-score   support\n","\n","           0       0.67      0.61      0.64       302\n","           1       0.64      0.69      0.66       299\n","\n","    accuracy                           0.65       601\n","   macro avg       0.65      0.65      0.65       601\n","weighted avg       0.65      0.65      0.65       601\n","\n","0.6522462562396006\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VA1wbECRuKiV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592455122947,"user_tz":-540,"elapsed":752,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}},"outputId":"e711d706-d496-4e0a-a4cb-cddf6b812bf5"},"source":["print(accuracy_score(y_test, y_pred_test))"],"execution_count":272,"outputs":[{"output_type":"stream","text":["0.6522462562396006\n"],"name":"stdout"}]}]}