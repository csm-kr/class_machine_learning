{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"assignment06.ipnyb","provenance":[{"file_id":"1kxLGScNJFdPu0TJjKnYjdBghuA8RpayJ","timestamp":1588227282478},{"file_id":"14sk42Vw2kXkbmmU_DRavxSB79umcYmY-","timestamp":1587433034302}],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyPRXx1Qrr87jC/QABByxt3S"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Eh-H3h7uYq8L","colab_type":"text"},"source":["Logistic regression for a binary classification with non-linear classification boundary\n","---"]},{"cell_type":"markdown","metadata":{"id":"RGKX-MJ6Y4Kj","colab_type":"text"},"source":["---\n","1. training data"]},{"cell_type":"code","metadata":{"id":"mCjFypiJiAu_","colab_type":"code","outputId":"e2dc8292-d643-4fd5-a70f-7228a277c5b9","executionInfo":{"status":"ok","timestamp":1588232339151,"user_tz":-540,"elapsed":935,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","data    = np.genfromtxt(\"data-nonlinear.txt\", delimiter=',')\n","\n","pointX  = data[:, 0]\n","pointY  = data[:, 1]\n","label   = data[:, 2]\n","\n","x = pointX\n","y = pointY\n","l = label\n","\n","pointX0 = pointX[label == 0]\n","pointY0 = pointY[label == 0]\n","\n","pointX1 = pointX[label == 1]\n","pointY1 = pointY[label == 1]\n","\n","plt.figure()\n","plt.scatter(pointX0, pointY0, c='b')\n","plt.scatter(pointX1, pointY1, c='r')\n","plt.tight_layout()\n","plt.gca().set_aspect('equal', adjustable='box')\n","plt.show()\n"],"execution_count":120,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"kZGc4RmTrR2R","colab_type":"text"},"source":["- load data-nonlinear.txt we can get {x, y, l} datas\n","- x, y $\\in$ $R$ and l $\\in$ {0, 1}"]},{"cell_type":"markdown","metadata":{"id":"wPo1sEKhmErE","colab_type":"text"},"source":["---\n","2. Logistic regression"]},{"cell_type":"code","metadata":{"id":"s4jMs0hcmGRC","colab_type":"code","colab":{}},"source":["def ret_z(theta_0, theta_1, theta_2, theta_3, theta_4, theta_5, x, y):\n","\n","  z = theta_0 + theta_1 * x * x + theta_2 * y * y + theta_3 * x * y + theta_4 * x + theta_5 * y  \n","  return z "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UioQf6vGmZ0X","colab_type":"text"},"source":["- make ret_z fucntion which returns a linear combination of x and y and thetas."]},{"cell_type":"code","metadata":{"id":"ayLY2fFXbZd_","colab_type":"code","colab":{}},"source":["def hypothesis(z):\n","\n","  sigmoid = 1 / (1 + np.exp(-1 * z))\n","  return sigmoid"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GpMtN91Mb-FE","colab_type":"text"},"source":["- make hypothesis function that returns sigmoid of z. "]},{"cell_type":"code","metadata":{"id":"BxP6eYbkmkL0","colab_type":"code","colab":{}},"source":["def binary_cross_entropy_loss (theta_0, theta_1, theta_2, theta_3, theta_4, theta_5, x, y, l):\n","\n","  m = len(x) # 100\n","  # print('num of data : ', m)\n","  z = ret_z(theta_0, theta_1, theta_2, theta_3, theta_4, theta_5, x, y) # (100, )\n","  h = hypothesis(z)                          # (100, )\n","  loss = np.sum(-l * np.log(h) - (1-l) * np.log(1 - h)) / m  # scalar\n","  return loss"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wUTnwAuKnEYm","colab_type":"text"},"source":["- make bce loss for $\\sigma(z)$ and labels."]},{"cell_type":"code","metadata":{"id":"Fq65MnfvnKZa","colab_type":"code","colab":{}},"source":["def gradient_descent(x, y, l, theta_0, theta_1, theta_2, theta_3, theta_4, theta_5, learning_rate=1e-2):\n","\n","  m = len(x)  \n","\n","  z = ret_z(theta_0, theta_1, theta_2, theta_3, theta_4, theta_5, x, y)\n","  h = hypothesis(z)\n","\n","  gradient_theta_0 = np.sum(h - l) / m\n","  gradient_theta_1 = np.sum((h - l) * x * x) / m\n","  gradient_theta_2 = np.sum((h - l) * y * y) / m\n","  gradient_theta_3 = np.sum((h - l) * x * y) / m\n","  gradient_theta_4 = np.sum((h - l) * x) / m\n","  gradient_theta_5 = np.sum((h - l) * y) / m\n","\n","  # print(\"gd : \", gradient_theta_0)\n","\n","  new_theta_0 = theta_0 - learning_rate * gradient_theta_0\n","  new_theta_1 = theta_1 - learning_rate * gradient_theta_1\n","  new_theta_2 = theta_2 - learning_rate * gradient_theta_2\n","  new_theta_3 = theta_3 - learning_rate * gradient_theta_3\n","  new_theta_4 = theta_4 - learning_rate * gradient_theta_4\n","  new_theta_5 = theta_5 - learning_rate * gradient_theta_5\n","\n","  return new_theta_0, new_theta_1, new_theta_2, new_theta_3, new_theta_4, new_theta_5"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-C6Nf2Aqo3zL","colab_type":"text"},"source":["- make gradient descent algorithm for logistic regression."]},{"cell_type":"code","metadata":{"id":"yFZd5KaAo-w9","colab_type":"code","colab":{}},"source":["# logistic regression process\n","\n","# initialize thetas arbitrarily\n","theta_0 = 0.5\n","theta_1 = 0.12\n","theta_2 = 0.25\n","theta_3 = 0.4\n","theta_4 = 0.1\n","theta_5 = 0.5\n","\n","theta_0_list = []\n","theta_1_list = []\n","theta_2_list = []\n","theta_3_list = []\n","theta_4_list = []\n","theta_5_list = []\n","\n","loss_list = []\n","\n","# until converge about 100000 steps\n","converge_step = 500000\n","for i in range(converge_step):\n","\n","  loss = binary_cross_entropy_loss(theta_0, theta_1, theta_2, theta_3, theta_4, theta_5, x, y, label)\n","  loss_list.append(loss)\n","\n","  theta_0_list.append(theta_0)\n","  theta_1_list.append(theta_1)\n","  theta_2_list.append(theta_2)\n","  theta_3_list.append(theta_3)\n","  theta_4_list.append(theta_4)\n","  theta_5_list.append(theta_5)\n","  theta_0, theta_1, theta_2, theta_3, theta_4, theta_5 = gradient_descent(x, y, label, theta_0, theta_1, theta_2, theta_3, theta_4, theta_5)\n","  "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GDWNZIASEFpk","colab_type":"text"},"source":["- initialize thetas arbitrarily and logistic regress for binary label and data\n","- using the gradient descent algorithm\n","- converge step is 100000"]},{"cell_type":"markdown","metadata":{"id":"dhEMj1SqEmw5","colab_type":"text"},"source":["---\n","3. plot the estimated parameters using the training dataset"]},{"cell_type":"code","metadata":{"id":"afCTvkbQv2Gv","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","x_ = np.arange(converge_step)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8FGlnS2rET8I","colab_type":"text"},"source":["- define x_ to plot along with steps"]},{"cell_type":"code","metadata":{"id":"kjumqyijleE8","colab_type":"code","outputId":"e2e9f899-a2cf-4b3d-a056-2cfefd11c40c","executionInfo":{"status":"ok","timestamp":1588232413166,"user_tz":-540,"elapsed":74830,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}},"colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["plt.scatter(x_, theta_0_list, c='r')\n","plt.scatter(x_, theta_1_list, c='g')\n","plt.scatter(x_, theta_2_list, c='b')\n","plt.scatter(x_, theta_3_list, c='r')\n","plt.scatter(x_, theta_4_list, c='g')\n","plt.scatter(x_, theta_5_list, c='b')\n","\n","plt.show()"],"execution_count":127,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"DiYz4kgnEdFn","colab_type":"text"},"source":["- plotting estimated parameters"]},{"cell_type":"markdown","metadata":{"id":"WFhJjaYWEx-Z","colab_type":"text"},"source":["---\n","4.  plot the training error"]},{"cell_type":"code","metadata":{"id":"oUZrJ6sCEhCg","colab_type":"code","outputId":"bba7a622-ffa4-4be8-efda-b067ea87def4","executionInfo":{"status":"ok","timestamp":1588232416640,"user_tz":-540,"elapsed":78279,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}},"colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["plt.scatter(x_, loss_list, c='b')\n","plt.show()"],"execution_count":128,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ol6-zsoKE64M","colab_type":"text"},"source":["- plot the training error"]},{"cell_type":"markdown","metadata":{"id":"oFlm4-lilN7V","colab_type":"text"},"source":["---\n","5. plot the obtained classifier"]},{"cell_type":"markdown","metadata":{"id":"P5ykXw2Q92Dt","colab_type":"text"},"source":["- plot the obtained classifier "]},{"cell_type":"markdown","metadata":{"id":"O69esomp8d2o","colab_type":"text"},"source":["6. Compute the training accuracy\n"]},{"cell_type":"code","metadata":{"id":"9TYnrrzd9teV","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","def get_accuracy(theta_0, theta_1, theta_2, theta_3, theta_4, theta_5, x, y, l):\n","    z = ret_z(theta_0, theta_1, theta_2, theta_3, theta_4, theta_5, x, y) # (100, )\n","    print(len(z))\n","    h = hypothesis(z) \n","    pred = (h>0.5).astype(np.float32)  \n","\n","    right_num = sum(pred == l)\n","    whole_pred_num = len(x)\n","\n","    acc = right_num / whole_pred_num\n","    acc *= 100\n","\n","    print('accuracy : {:.4f}%'.format(acc))\n","  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TSBkUlkf-3mC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"c395d397-8c91-4da8-d35a-f9013aaa620e","executionInfo":{"status":"ok","timestamp":1588232416642,"user_tz":-540,"elapsed":78235,"user":{"displayName":"조성민","photoUrl":"","userId":"00315417681750132645"}}},"source":["get_accuracy(theta_0, theta_1, theta_2, theta_3, theta_4, theta_5, x, y, l)"],"execution_count":130,"outputs":[{"output_type":"stream","text":["118\n","accuracy : 85.5932%\n"],"name":"stdout"}]}]}